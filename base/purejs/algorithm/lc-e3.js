/**
给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。
说明：
你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？
输入: [2,2,1]
输出: 1
输入: [4,1,2,1,2]
输出: 4

任何数和 0 做异或运算，结果仍然是原来的数
任何数和其自身做异或运算，结果是 0
异或运算满足交换律和结合律 a^b^a = a^a^b
 */
var singleNumber = function(nums) {
  let res = 0, i = -1
  while (i++ < nums.length) {
    res ^= nums[i]
  }
  return res
}
// const nums = [1,0,1]
const nums = [1,3,1,-1,3]
// const nums = [4,1,2,1,2]
// const nums = [-336,513,-560,-481,-174,101,-997,40,-527,-784,-283,-336,513,-560,-481,-174,101,-997,40,-527,-784,-283,354]
singleNumber(nums)